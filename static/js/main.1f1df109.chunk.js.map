{"version":3,"sources":["components/card/card.js","components/card-list/card-list.js","components/search-box/search-box.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","src","concat","string","id","name","email","Cardlist","strings","map","card_Card","key","SearchBox","_ref","placeholder","handleChange","type","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","setState","searchFeild","target","value","state","_this2","fetch","then","response","json","users","_this$state","filteredString","filter","toLowerCase","includes","search_box_SearchBox","card_list_Cardlist","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAGaA,qBAAO,SAACC,GAAD,OACnBC,EAAAC,EAAAC,cAAA,OAAMC,UAAU,kBACZH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,OAAOC,IAAG,wBAAAC,OAA0BP,EAAMQ,OAAOC,GAAvC,gCACtBR,EAAAC,EAAAC,cAAA,UAAKH,EAAMQ,OAAOE,MAClBT,EAAAC,EAAAC,cAAA,SAAIH,EAAMQ,OAAOG,UCFNC,EAAW,SAACZ,GAAD,OACvBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbJ,EAAMa,QAAQC,IAAI,SAAAN,GAAM,OACnBP,EAAAC,EAAAC,cAACY,EAAD,CAAMC,IAAKR,EAAOC,GAAID,OAAQA,QCLzBS,SAAY,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,YAAYC,EAAdF,EAAcE,aAAd,OACxBnB,EAAAC,EAAAC,cAAA,SACGC,UAAU,SACViB,KAAK,SACFF,YAAaA,EACbG,SAAUF,MCqCFG,cAvCb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAiBFP,aAAa,SAACW,GACbP,EAAKQ,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAhBpCX,EAAKY,MAAM,CACTvB,QAAS,GACToB,YAAY,IALHT,mFAYM,IAAAa,EAAAV,KACjBW,MAAM,8CACJC,KAAK,SAAAC,GAAQ,OAAEA,EAASC,SACxBF,KAAK,SAAAG,GAAK,OAAEL,EAAKL,SAAS,CAACnB,QAAQ6B,uCAO9B,IAAAC,EACyBhB,KAAKS,MAA5BvB,EADF8B,EACE9B,QAAQoB,EADVU,EACUV,YACTW,EAAiB/B,EAAQgC,OAAO,SAAArC,GAAM,OAC1CA,EAAOE,KAAKoC,cAAcC,SAASd,EAAYa,iBACjD,OACE7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAC6C,EAAD,CACE7B,YAAc,SACdC,aAAgBO,KAAKP,eAEvBnB,EAAAC,EAAAC,cAAC8C,EAAD,CAAUpC,QAAS+B,YAnCXM,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.1f1df109.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.css'\r\n\r\nexport const Card = (props) => (\r\n\t<div  className=\"card-container\">\r\n\t    <img alt=\"robo\" src={`https://robohash.org/${props.string.id}?set=set5& size=180Ã—180`} />\r\n\t\t<h2>{props.string.name}</h2>\r\n\t\t<p>{props.string.email}</p>\r\n\t</div>\r\n\t)","import React from 'react'\r\nimport './card-list.css'\r\nimport {Card} from '../card/card'\r\n\r\n\r\nexport const Cardlist = (props) =>(\r\n\t<div className=\"card-list\">\r\n\t {props.strings.map(string=>(\r\n        <Card key={string.id} string={string}/>\r\n      ))}\r\n\t</div>\r\n\t)","import React from 'react'\r\nimport './search-box.css'\r\n\r\nexport const SearchBox = ({placeholder,handleChange}) =>(\r\n\t<input \r\n\t   className=\"search\"\r\n\t   type=\"search\" \r\n       placeholder={placeholder}\r\n       onChange={handleChange} />\r\n\t)","import React, {Component} from 'react';\nimport './App.css';\nimport {Cardlist} from './components/card-list/card-list'\nimport {SearchBox} from './components/search-box/search-box'\nclass App extends Component{\n\n  constructor(){\n    super();\n\n    this.state={\n      strings: [],\n      searchFeild:''\n    };\n\n    //this.handleChange = this.handleChange.bind(this); \n    // have to do bind if not using arrow  function\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n     .then(response=>response.json())\n     .then(users=>this.setState({strings:users}))\n  }\n\n  handleChange=(e)=>{\n   this.setState({searchFeild: e.target.value})\n  }\n\n   render(){\n      const {strings,searchFeild} = this.state;\n      const filteredString = strings.filter(string =>\n        string.name.toLowerCase().includes(searchFeild.toLowerCase()));\n      return (\n        <div className=\"App\">\n          <h1>Find Your Contact</h1>\n          <SearchBox \n            placeholder = 'search'\n            handleChange = {this.handleChange}\n          />\n          <Cardlist strings={filteredString}/>\n        </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}